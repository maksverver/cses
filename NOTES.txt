Most problems can be solved by referencing the Competitive Programmer's Handbook
available at: https://usaco.guide/CPH.pdf

Open questions:

  - what is the complexity of concert-tickets-2.cc?

Important problems:

  - elevator-rides.cc (bin packing in O(N × 2^N))
    Interesting that the problem becomes easier by calculating more information!

  - high-scores.cc ("shortest path" with cycle detection, Bellman-Ford)
    Shows how to handle cycles correctly (they may exist but not lie on the
    path from start to finish).

  - cycle-finding.cc (Bellman-Ford)
    Shows how to collect cycles in a graph.
    Note: this assumes you may start from any vertex in the graph!

TODO:

  - cycle-finding.cc: prove that following prev[v] always leads to a negative-weight cycle
  - ”Shortest Path Faster Algorithm” (variation of Bellman Ford)
    test with cycle-finding.cc?
  - implement min-stack / min-queue and add them to code library
    https://cp-algorithms.com/data_structures/stack_queue_modification.html
  - test with maximum-subarray-sum-II.cc

  - Strongly Connected Components should be put in codelib (from flight-roughts-check.cc)
    and be changed not to rely on call-stack recursion!

  - Add a note about 2SAT (giant-pizza.cc) to codelib2/

  - Add a note about Eulerian tours (Hierholzer's algorithm) (mail-delivery.cc, teleporters-path.cc) to codelib2/

  - Min Cost Max Flow:
     - add implementation of Dinic's algorithm?
       I want O(V^2 E) performance
       and the ability to easily extract the flow graph and the edges in a min cut
       need a problem to test it on!

  - Combine usages of min-cost-max-flow into a single header
  - Combine usages of Hierholzer's algorithm into a single header
    Also, it would be nice to have a more solid grasp of why rotating works (especially in the case
    where there is a loop at vertex 0?)
